<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cs on ze sheng</title><link>https://zes1092.github.io/categories/cs/</link><description>Recent content in cs on ze sheng</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright/><lastBuildDate>Tue, 22 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://zes1092.github.io/categories/cs/index.xml" rel="self" type="application/rss+xml"/><item><title>COMP4121</title><link>https://zes1092.github.io/posts/comp4121/</link><pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate><guid>https://zes1092.github.io/posts/comp4121/</guid><description>Stats Expectation and Variance of a Random Variable The expected value of a random variable is its mean. Assuming that the expected value converges, the expected value can be calculated as shown below.
Discrete random variable Continuous random variable $E(X) = \sum_{i = 1}^{\infty} v_i \cdot p_i$ $E(X) = \int_{-\infty}^{\infty}x \cdot f(x) dx$ The variance of a random variable is defined as $V(X) = E(X - E(X))^2$ assuming that both expectations involved are finite; the standard deviation of a random variable $X$ is given by $\sigma = \sqrt{V(X)}$.</description></item><item><title>COMP3821</title><link>https://zes1092.github.io/posts/comp3821/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://zes1092.github.io/posts/comp3821/</guid><description>The course is split into four topics
Divide and Conquer Greedy Algorithms Dynamic Programming Linear Programming and Reductions However for the sake of organising notes, I&amp;rsquo;ve included an extra section to cover knowledge not covered in the course&amp;rsquo;s prerequisite (COMP2521), and split Linear Programming and Reductions into two sections.
Misc Knowledge Asymptotic Runtime $O(n)$, Big O Denotes the upper bound of the runtime of an algorithm If $f(n) = O(g(n))$, there exist positive constants $c$ and $n_0$ such that $0 \leq f(n) \leq cg(n), \forall n \geq n_0$ $f(n) = O(g(n))$ means that $f(n)$ does not grow substantially faster than $g(n)$ because a multiple of $g(n)$ eventually dominates $f(n)$ Most commonly used as we are concerned with the worst runtime $\Theta(n)$, Big Theta Denotes a tight bound of the runtime of an algorithm $f(n) = \Theta(g(n))$ iff $f(n) = O(g(n))$ and $f(n) = \Omega(g(n))$ Less commonly used than $O(n)$, but more common than $\Omega(n)$ $\Omega(n)$, Big Omega Denotes the lower bound of the runtime of an algorithm If $f(n) = \Omega(g(n))$, there exist positive constants $c$ and $n_0$ such that $0 \leq cg(n) \leq f(n), \forall n \geq n_0$ $f(n) = \Omega(g(n))$ means that $f(n)$ grows at least as fast as $g(n)$, because $f(n)$ eventually dominates a multiple of $g(n)$ Least often used as we usually aren&amp;rsquo;t concerned with the best runtime Math Log Identity If $a, b, c &amp;gt; 0$ then $$a^{\log_{b}c} = c^{\log_{b}a}$$ Proof</description></item><item><title>All Pairs Shortest Paths, Rings and Semi Rings</title><link>https://zes1092.github.io/posts/all-pairs-shortest-paths-rings-and-semi-rings/</link><pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate><guid>https://zes1092.github.io/posts/all-pairs-shortest-paths-rings-and-semi-rings/</guid><description>Introduction The Single Source Shortest Paths (SSSP) problem is to find the shortest distance from one node to every other node in a graph. The All Pairs Shortest Paths (APSP) problem, is to determine for every node in the graph, the shortest distance to every other node in a graph. APSP typically has applications in routing algorithms, i.e. finding the shortest path from one location to another.
Usual algorithms Depending on the type of graph, for both SSSP and APSP there are different algorithms to solve the relevant problems.</description></item></channel></rss>